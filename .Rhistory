df = append(df,corrs$rho)
}
}
}
if(format=="rowdf"){
return(df)
}
if(format=="coldf"){
return(data.frame(matrix(df,ncol=length(df))))
}
}
nbootstrap = 10000
maxai = 0.1
lag = 2
# set seed for reproducibility
set.seed(0)
trajs=data.frame();eigs=data.frame()
for(b in 1:nbootstrap){
if(b%%100==0){show(b)}
#ar=array(data = c(diag(3),runif(9,-0.5,0.5)),dim = c(3,3,2))
#x=marima.sim(kvar=3,ar.model = ar,nsim=10000)
ar=array(data = c(diag(2),rep(0,4),c(0,runif(1,-maxai,maxai),runif(1,-maxai,maxai),0)),dim = c(2,2,3))
x=marima.sim(kvar=2,ar.model = ar,nsim=10000)
plotLaggedCorrs(x)
trajs=rbind(trajs,laggedCorrs(x,format = "coldf"))
#eigs=rbind(eigs,eigen(ar[,,2])$values)
eigs=rbind(eigs,c(ar[1,2,3],ar[2,1,3]))
}
set.seed(0)
trajs=data.frame();eigs=data.frame()
for(b in 1:nbootstrap){
if(b%%100==0){show(b)}
#ar=array(data = c(diag(3),runif(9,-0.5,0.5)),dim = c(3,3,2))
#x=marima.sim(kvar=3,ar.model = ar,nsim=10000)
ar=array(data = c(diag(2),rep(0,4),c(0,runif(1,-maxai,maxai),runif(1,-maxai,maxai),0)),dim = c(2,2,3))
x=marima.sim(kvar=2,ar.model = ar,nsim=10000)
#plotLaggedCorrs(x)
trajs=rbind(trajs,laggedCorrs(x,format = "coldf"))
#eigs=rbind(eigs,eigen(ar[,,2])$values)
eigs=rbind(eigs,c(ar[1,2,3],ar[2,1,3]))
}
help(chol)
coords = matrix(runif(2*n),ncol = 2)
n = 20
coords = matrix(runif(2*n),ncol = 2)
coords
plot(coords)
help(spDist )
??spDist
library(sp)
dist(coords)
d = dist(coords)
chol(d)
d
d[1,1]
d = as.matrix(dist(coords))
d[1,1]
d[1,2]
d[2,1]
chol(d)
helpp(chol)
help(chol)
diag(d)<-1
chol(d)
d
chol(d,pivot=T)
d = as.matrix(dist(coords))
length(d)
d = d + matrix(rnorm(length(d),sd = 0.01),nrow = nrow(d))
diag(d)<-1
chol(d,pivot=T)
c = chol(d,pivot=T)
c%*%t(c)
2000/60
8000*4
8000*4/2000/60
8000*4/2000
8000*4/2000
8000*4/2000*100/60
8000*4/2000*50/60
library(rgdal)
v1=c(1:10)
v2=as.character(c(1,1,1,3,4,10,1,1,4,5))
v=cbind(v2,v1)
v=as.data.frame(v)
colnames(v)=c("id_point","id_cluster")
table_tmp <- table(v$id_cluster)
table_tmp
v
table(v)
table(v$id_point)
v2=c(1,1,1,3,4,10,1,1,4,5)
v=cbind(v2,v1)
v
table(v$id_cluster)
v=as.data.frame(v)
colnames(v)=c("id_point","id_cluster")
table_tmp <- table(v$id_cluster)
table_tmp
is.numeric(v$id_point)
is.numeric(v$id_cluster)
table(sample.int(10,100,replace = T))
table(as.character(sample.int(10,100,replace = T)))
install.packages(c("sp", "MASS", "reshape2","geojsonio","rgdal","downloader","maptools","dplyr","broom","stplanr", "ggplot2", "leaflet"))
library(sp)
library(MASS)
library(reshape2)
library(geojsonio)
library(rgdal)
library(downloader)
library(maptools)
library(dplyr)
library(broom)
library(stplanr)
library(ggplot2)
library(leaflet)
EW <- geojson_read("http://geoportal.statistics.gov.uk/datasets/8edafbe3276d4b56aec60991cbddda50_2.geojson", what = "sp")
London <- EW[grep("^E09",EW@data$lad15cd),]
BNG = "+init=epsg:27700"
LondonBNG <- spTransform(London, BNG)
LondonBNG <- LondonBNG[order(LondonBNG$lad15cd),]
dist <- spDists(LondonBNG)
distPair <- melt(dist)
cdata <- read.csv("https://www.dropbox.com/s/7c1fi1txbvhdqby/LondonCommuting2001.csv?raw=1")
CodeLookup <- read.csv("https://www.dropbox.com/s/h8mpvnepdkwa1ac/CodeLookup.csv?raw=1")
popincome <- read.csv("https://www.dropbox.com/s/84z22a4wo3x2p86/popincome.csv?raw=1")
cdata$OrigCodeNew <- CodeLookup$NewCode[match(cdata$OrigCode, CodeLookup$OldCode)]
cdata$DestCodeNew <- CodeLookup$NewCode[match(cdata$DestCode, CodeLookup$OldCode)]
cdata$vi1_origpop <- popincome$pop[match(cdata$OrigCodeNew, popincome$code)]
cdata$vi2_origsal <- popincome$med_income[match(cdata$OrigCodeNew, popincome$code)]
cdata$wj1_destpop <- popincome$pop[match(cdata$DestCodeNew, popincome$code)]
cdata$wj2_destsal <- popincome$med_income[match(cdata$DestCodeNew, popincome$code)]
cdata <- arrange(cdata, OrigCodeNew, DestCodeNew)
cdata$TotalNoIntra <- ifelse(cdata$OrigCode == cdata$DestCode,0,cdata$Total)
cdata$offset <- ifelse(cdata$OrigCode == cdata$DestCode,0.0000000001,1)
cdata$dist <- distPair$value
toMatch<-c("00AA", "00AB", "00AC", "00AD", "00AE", "00AF", "00AG")
cdatasub <- cdata[grep(paste(toMatch,collapse = "|"), cdata$OrigCode),]
cdatasub <- cdatasub[grep(paste(toMatch,collapse = "|"), cdata$DestCode),]
cdatasub <- cdatasub[cdatasub$OrigCode!=cdatasub$DestCode,]
cdatasub <- cdatasub[1:42,]
cdatasub <- dplyr::select(cdatasub, OrigCodeNew, DestCodeNew, Total, everything())
travel_network <- od2line(flow = cdatasub, zones = LondonBNG)
library(stplanr)
install.packages("openxlsx")
install.packages("stplanr")
library(stplanr)
travel_network <- od2line(flow = cdatasub, zones = LondonBNG)
help(od2line)
LondonBNG
cdatasub
cdatasub[1:10,!;@]
cdatasub[1:10,1:2]
cdatasub[1:10,1:3]
cdatasub[1:10,1:4]
cents
flows
flow
flow[1:10]
flow[1:10,]
flow[1:10,1:4]
od2line(flow = flow, zones = cents)
cents
LondonBNG
travel_network <- od2line(flow = cdatasub, zones = LondonBNG)
LondonBNG$objectid
LondonBNG$lad15cd
cdatasub
is.character(cdatasub[,1])
is.factor(cdatasub[,1])
cdatasub$DestCodeNew<- as.character(cdatasub$DestCodeNew)
travel_network <- od2line(flow = cdatasub, zones = LondonBNG)
od2line(flow = flow, zones = cents)
flow[1,]
flow[1,1]%in%cents$MSOA11NM
flow[1,1]%in%cents$geo_code
cdatasub[1,1]%in%LondonBNG$objectid
cdatasub[1,1]%in%LondonBNG$lad15cd
travel_network <- od2line(flow = cdatasub, zones = LondonBNG[,-1])
w <- cdatasub$Total / max(cdatasub$Total) * 10
plot(travel_network, lwd = w)
plot(LondonBNG, add=T)
travel_networkwgs <- spTransform(travel_network, "+init=epsg:4326")
leaflet() %>% addTiles() %>% addPolylines(data = travel_networkwgs)
CalcRMSE <- function(observed,estimated){
res <- (observed - estimated)^2
RMSE <- round(sqrt(mean(res)),3)
RMSE
}
CalcRMSE(cdatasub$Total,cdatasub$unconstrainedEst1)
help(dcast)
CalcRMSE <- function(observed,estimated){
res <- (observed - estimated)^2
RMSE <- round(sqrt(mean(res)),3)
RMSE
}
CalcRMSE(cdatasub$Total,cdatasub$unconstrainedEst1)
mu <- 1
alpha <- 1
beta <- -2
k <- 1
T2 <- sum(cdatasub$Total)
vi1_mu <- cdatasub$vi1_origpop^mu
wj2_alpha <- cdatasub$wj2_destsal^alpha
dist_beta <- cdatasub$dist^beta
T1 <- vi1_mu*wj2_alpha*dist_beta
k <- T2/sum(T1)
cdatasub$unconstrainedEst1 <- round(k*vi1_mu*wj2_alpha*dist_beta,0)
CalcRMSE <- function(observed,estimated){
res <- (observed - estimated)^2
RMSE <- round(sqrt(mean(res)),3)
RMSE
}
CalcRMSE(cdatasub$Total,cdatasub$unconstrainedEst1)
CalcRSquared(cdatasub$Total,cdatasub$unconstrainedEst1)
R2
CalcRSquared <- function(observed,estimated){
r <- cor(observed,estimated)
R2 <- r^2
R2
}
CalcRSquared(cdatasub$Total,cdatasub$unconstrainedEst1)
CalcRMSE <- function(observed,estimated){
res <- (observed - estimated)^2
RMSE <- round(sqrt(mean(res)),3)
RMSE
}
CalcRMSE(cdatasub$Total,cdatasub$unconstrainedEst1)
uncosim <- glm(Total ~ log(vi1_origpop)+log(wj2_destsal)+log(dist), na.action = na.exclude, family = poisson(link = "log"), data = cdatasub)
k <- uncosim$coefficients[1]
mu <- uncosim$coefficients[2]
alpha <- uncosim$coefficients[3]
beta <- -uncosim$coefficients[4]
cdatasub$unconstrainedEst2 <- exp(k+(mu*log(cdatasub$vi1_origpop))+(alpha*log(cdatasub$wj2_destsal))-(beta*log(cdatasub$dist)))
cdatasub$unconstrainedEst2 <- (exp(k)*exp(mu*log(cdatasub$vi1_origpop))*exp(alpha*log(cdatasub$wj2_destsal))*exp(-beta*log(cdatasub$dist)))
cdatasub$fitted <- fitted(uncosim)
cdatasub$unconstrainedEst2 <- round(cdatasub$unconstrainedEst2,0)
cdatasubmat <- dcast(cdatasub, Orig ~ Dest, sum, value.var = "Total", margins=c("Orig", "Dest"))
prodSim <- glm(Total ~ OrigCodeNew+log(DestPop)+log(dist)-1, na.action = na.exclude, family = poisson(link = "log"), data = cdatasub)
prodSim <- glm(Total ~ OrigCodeNew+log(wj2_destsal)+log(dist)-1, na.action = na.exclude, family = poisson(link = "log"), data = cdatasub)
summary(prodSim)
O_i <- cdatasub %>% group_by(OrigCodeNew) %>% summarise(O_i = sum(Total))
cdatasub$O_i <- O_i$O_i[match(cdatasub$OrigCodeNew,O_i$OrigCodeNew)]
D_j <- cdatasub %>% group_by(DestCodeNew) %>% summarise(D_j = sum(Total))
cdatasub$D_j <- D_j$D_j[match(cdatasub$DestCodeNew,D_j$DestCodeNew)]
prodSim_out <- tidy(prodSim)
prodSim_out
coefs <- as.data.frame(prodSim$coefficients)
cdatasub$mu_i <- coefs$`prodSim$coefficients`[match(cdatasub$OrigCodeNew,sub(".*OrigCodeNew","", rownames(coefs)))]
head(cdatasub)
mu_i <- prodSim$coefficients[1:7]
alpha <- prodSim$coefficients[8]
beta <- prodSim$coefficients[9]
cdatasub$prodsimest1 <- exp((cdatasub$mu_i)+(alpha*log(cdatasub$DestPop))+(beta*log(cdatasub$dist)))
mu_i <- prodSim$coefficients[1:7]
alpha <- prodSim$coefficients[8]
beta <- prodSim$coefficients[9]
cdatasub$prodsimest1 <- exp((cdatasub$mu_i)+(alpha*log(cdatasub$wj2_destsal))+(beta*log(cdatasub$dist)))
cdatasub$prodsimFitted <- fitted(prodSim)
cdatasub$prodsimFitted <- round(fitted(prodSim),0)
cdatasubmat3 <- dcast(cdatasub, Orig ~ Dest, sum, value.var = "prodsimFitted", margins=c("Orig", "Dest"))
cdatasubmat3
CalcRSquared(cdatasub$Total,cdatasub$prodsimFitted)
CalcRMSE(cdatasub$Total,cdatasub$prodsimFitted)
cdatasub$wj3_destsalScenario <- cdatasub$wj2_destsal
cdatasub$wj3_destsalScenario <- ifelse(cdatasub$wj3_destsalScenario == 16200,25000,cdatasub$wj3_destsalScenario)
cdatasub$prodsimest2 <- exp((cdatasub$mu_i)+(alpha*log(cdatasub$wj3_destsalScenario))+(beta*log(cdatasub$dist)))
cdatasub$prodsimest2 <- round(cdatasub$prodsimest2,0)
cdatasubmat4 <- dcast(cdatasub, Orig ~ Dest, sum, value.var = "prodsimest2", margins=c("Orig", "Dest"))
cdatasubmat4
cdatasub
cdatasubmat4
cdatasub$prodsimest2 <- exp((cdatasub$mu_i)+(alpha*log(cdatasub$wj3_destsalScenario))+(beta*log(cdatasub$dist)))
cdatasub$prodsimest2 <- round(cdatasub$prodsimest2,0)
cdatasubmat4 <- dcast(cdatasub, Orig ~ Dest, sum, value.var = "prodsimest2", margins=c("Orig", "Dest"))
cdatasubmat4
setwd(paste0(Sys.getenv("CS_HOME"),'/UrbanDynamics/Models/ABMCitiesFirms'))
Sys.getenv("CS_HOME")
library(hypervolume)
install.packages('hypervolume')
library(hypervolume)
help("hypervolume")
library(sp)
coords = matrix(runif(200),ncol = 2)
coords
d <- dist(coords)
d
dim(d)
d <- spDist(coords)
d <- spDists(coords)
dim(d)
d
min(d)
N = 100
coords = matrix(runif(2*N),ncol = 2)
d <- spDists(coords)
ai = runif(N,0,1000)
ej = runif(N,0,1000)
kij = matrix(rep(ai,N),byrow = T) +  matrix(rep(ej,N),byrow = F)
dij <- spDists(coords)
f <- function(x){sum(kij*dij*exp(-x*dij))/sum(kij*exp(-x*dij))}
f(0)
kij = matrix(rep(ai,N),nrows=N,byrow = T) +  matrix(rep(ej,N),nrows=N,byrow = F)
kij = matrix(rep(ai,N),nrow=N,byrow = T) +  matrix(rep(ej,N),nrow=N,byrow = F)
f <- function(x){sum(kij*dij*exp(-x*dij))/sum(kij*exp(-x*dij))}
f(0)
f(10000)
min(dij)
min(dij[dij>0])
f(-10000)
f(-100)
f(-10)
max(dij)
help(deriv)
help(diff)
sapply(seq(0,10,0.01),f)
plot(sapply(seq(0,10,0.01),f),type='l')
plot(sapply(seq(0,100,0.01),f),type='l')
fp = diff(sapply(seq(0,100,0.01),f))/0.01
max(fp)
dx = 0.01
seq(0,100,dx)
f(dx)-f(0)
(f(dx)-f(0))/dx
fp = diff(sapply(seq(0,100,dx),f))/0.01
max(abs(fp))
coords = matrix(runif(2*N,0,1000),ncol = 2)
dij <- spDists(coords)
ai = runif(N,0,1000)
ej = runif(N,0,1000)
kij = matrix(rep(ai,N),nrow=N,byrow = T) +  matrix(rep(ej,N),nrow=N,byrow = F)
f <- function(x){sum(kij*dij*exp(-x*dij))/sum(kij*exp(-x*dij))}
dx = 0.01
plot(sapply(seq(0,100,dx),f),type='l')
fp = diff(sapply(seq(0,100,dx),f))/0.01
max(abs(fp))
help(solve)
help(minimize)
??newClassRepresentation
help(optim)
g<- function(x){f(x)-100}
optim(10,g)
optimize(10,g)
help(optimize)
optimize(g,c(0,1000))
g<- function(x){abs(f(x)-100)}
optimize(g,c(0,1000))
plot(sapply(seq(0,100,dx),f),type='l')
optimize(g,c(0,0.1))
1
g<- function(x){abs(f(x)-100)}
optimize(g,c(0,0.01))
g<- function(x){abs(f(x)-100)}
optimize(g,c(0,1))
optimize(g,c(0,1))
optimize(g,c(0,2))
optimize(g,c(0,2))$minimum
xstar = optimize(g,c(0,2))$minimum
dx = 0.0001
dx = 0.0001
(f(xstar+dx) - f(xstar))/dx
l = 100
l = 100
g<- function(x){abs(f(x)-l)}
xstar = optimize(g,c(0,2))$minimum
dx = 0.0001
1 - xstar*((f(xstar+dx) - f(xstar))/dx)/l
coords = matrix(runif(2*N,0,100),ncol = 2)
dij <- spDists(coords)
ai = runif(N,0,1000)
ej = runif(N,0,1000)
kij = matrix(rep(ai,N),nrow=N,byrow = T) +  matrix(rep(ej,N),nrow=N,byrow = F)
f <- function(x){sum(kij*dij*exp(-x*dij))/sum(kij*exp(-x*dij))}
dx = 0.01
fp = diff(sapply(seq(0,100,dx),f))/0.01
max(abs(fp))
l = 10
g<- function(x){abs(f(x)-l)}
xstar = optimize(g,c(0,2))$minimum
dx = 0.0001
1 - xstar*((f(xstar+dx) - f(xstar))/dx)/l
dij = read.csv(file = paste0(Sys.getenv('CS_HOME'),'/UrbanDynamics/Data/QUANT/converted/dis_roads_min.csv'))
dij = read.csv(file = paste0(Sys.getenv('CS_HOME'),'/UrbanDynamics/Data/QUANT/converted/dis_roads_min.csv'),header=F,skip = 1)
dim(dij)
Tijsparse = read.csv(file = paste0(Sys.getenv('CS_HOME'),'/UrbanDynamics/Data/QUANT/converted/TObs_1.csv'),header=F,skip = 1)
library(Matrix)
library(Matrix)
dij=Matrix(dij)
help(Matrix)
dij=Matrix(as.matrix(dij))
dim(dij)
Tij = sparseMatrix(i=Tijsparse$V1,j=Tijsparse$V2,x=Tijsparse$V3)
Tij = sparseMatrix(i=Tijsparse$V1,j=Tijsparse$V2,x=Tijsparse$V3,dims=dim(dij))
max(Tijsparse$V1)
macx(Tijsparse$V2)
max(Tijsparse$V2)
dim(dij)
Tij = sparseMatrix(i=Tijsparse$V1,j=Tijsparse$V2,x=Tijsparse$V3,dims=c(8436,8436))
Tijsparse$V1
summary(Tijsparse$V1)
summary(Tijsparse$V2)
summary(Tijsparse$V3)
Tij = sparseMatrix(i=Tijsparse$V1,j=Tijsparse$V2,x=Tijsparse$V3,dims=c(9000,9000))
Tij = sparseMatrix(i=Tijsparse$V1,j=Tijsparse$V2,x=Tijsparse$V3,dims=dim(dij),index1 = F)
Tij
dbar = sum(dij*Tij)/sum(Tij)
dbar
ki = rowSums(Tij)
ki
ki = rep(rowSums(Tij),nrow(Tij))
ki
kij = Matrix(matrix(rep(rowSums(Tij),nrow(Tij)),nrow = nrow(Tij),byrow = T) + matrix(rep(colSums(Tij),nrow(Tij)),nrow = nrow(Tij),byrow = F))
f <- function(x){sum(kij*dij*exp(-x*dij))/sum(kij*exp(-x*dij))}
g <- function(x){x*f(x)/dbar}
xstar=1
for(k in 1:10){
xstar = g(xstar)
show(xstar)
}
dx = 0.0001
(g(xstar+dx)-g(xstar))/dx
gp <- function(x){(g(x+dx)-g(x))/dx}
gp(1)
gp(0)
gp(g(1))
plot(xvals,sapply(g,xvals),type='l');points(xvals,xvals,col='red',type='l',add=T)
xvals = seq(0.025,0.035,0.001)
plot(xvals,sapply(g,xvals),type='l');points(xvals,xvals,col='red',type='l',add=T)
plot(xvals,sapply(xvals,g),type='l');points(xvals,xvals,col='red',type='l',add=T)
g(0)
help("read.table")
help("list.dirs")
help(write.table)
setwd(paste0(Sys.getenv('CS_HOME'),'/QuantEpistemo/Models/UKMigration'))
library(dplyr)
library(igraph)
library(glue)
library(reshape2)
library(ggplot2)
library(heatmaply)
source(paste0(Sys.getenv('CS_HOME'),'/Organisation/Models/Utils/R/plots.R'))
source('functions.R')
edge_file = 'export/corpus_filteredNonExcl_links.csv'
node_file = 'export/corpus_filteredNonExcl.csv'
edges <- read.csv(edge_file,sep=";",header=F,colClasses = c('character','character'))
nodes <- as.tbl(read.csv(node_file,sep=";",stringsAsFactors = F,quote = '"',colClasses = rep('character',9)))
names(nodes)
for(j in 6:21){nodes[,j]=as.numeric(unlist(nodes[,j]))}
kws = names(nodes)[6:21]
edges = edges[edges$V1%in%nodes$id&edges$V2%in%nodes$id,]
nodes = cbind(nodes,numHorizontalDepth=apply(nodes[,8:9],1,function(r){min(r,na.rm=T)}))
nodes <- as.tbl(read.csv(node_file,sep=";",stringsAsFactors = F,quote = '"',colClasses = rep('character',9)))
nodes = nodes[,-18] # remove filtered column
names(nodes)
for(j in 6:20){nodes[,j]=as.numeric(unlist(nodes[,j]))}
kws = names(nodes)[6:20]
edges = edges[edges$V1%in%nodes$id&edges$V2%in%nodes$id,]
nodes = cbind(nodes,numHorizontalDepth=apply(nodes[,6:20],1,function(r){min(r,na.rm=T)}))
nodes = nodes[is.finite(nodes$numHorizontalDepth),]
citation <- graph_from_data_frame(edges,vertices = nodes)
components(citation)$csize
citation = induced_subgraph(citation,which(components(citation)$membership==1))
citationcorehigher = induced_subgraph(citation,which(degree(citation)>1))
while(length(which(degree(citationcorehigher)==1))>0){citationcorehigher = induced_subgraph(citationcorehigher,which(degree(citationcorehigher)>1))}
citationcorehigher
export_gml(citationcorehigher,'processed/core.gml')
source('functions.R')
export_gml(citationcorehigher,'processed/core.gml')
source('functions.R')
export_gml(citationcorehigher,'processed/core.gml')
save(citationcorehigher,file='processed/core.RData')
save(citation,file='processed/full.RData')
A=as_adjacency_matrix(citationcorehigher,sparse = T)
M = A+t(A)
undirected_core = graph_from_adjacency_matrix(M,mode="undirected")
# communities
set.seed(666)
com = cluster_louvain(undirected_core)
directedmodularity(com$membership,A)
save(com,file='processed/core_coms.RData')
names(V(citation))
citation
summary(V(citation)$residential_mobility_census_UK)
kws
for(kw in kws){summary(V(citation)[[kw]])}
for(kw in kws){summary(V(citation)[kw])}
for(kw in kws){summary(attr(V(citation),kw))}
for(kw in kws){show(summary(attr(V(citation),kw)))}
attr(V(citation),kw)
kw
summary(V(citation)$residential_mobility)
summary(V(citation)$families_move)
summary(V(citation)$internal_migration_census_UK)
unique(V(citation)$residential_mobility)
sort(unique(V(citation)$residential_mobility))
summary(V(citation)$depth)
summary(as.numeric(V(citation)$depth))
table(V(citation)$depth))
table(V(citation)$depth)
table(V(citation)$laws_of_migration)
table(V(citation)$theory_of_migration)
unique(V(citation)$theory_of_migration)
unique(V(citation)$laws_of_migration)
citation
induced_subgraph(citation,!is.na(V(citation)$laws_of_migration))
d=degree(citationcorehigher,mode='in')
for(c in unique(com$membership)){
show(paste0("Community ",c, " ; corpus prop ",length(which(com$membership==c))/vcount(undirected_core)))
currentd=d[com$membership==c];dth=sort(currentd,decreasing = T)[10]
show(data.frame(titles=V(citationcorehigher)$title[com$membership==c&d>dth],degree=d[com$membership==c&d>dth]))
#show(V(rawcore)$title[com$membership==c])
}
